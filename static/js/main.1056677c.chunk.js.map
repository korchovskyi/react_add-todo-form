{"version":3,"sources":["api/users.ts","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","App.tsx","api/todos.ts","index.tsx"],"names":["id","name","username","email","UserInfo","user","className","href","TodoInfo","todo","title","completed","cn","TodoList","todos","map","getUserById","userId","usersFromServer","find","App","useState","newTodoTitle","setNewTodoTitle","newTodoUserId","setNewTodoUserId","todosState","setTodos","isTitleError","setTitleError","isUserError","setUserError","onSubmit","event","preventDefault","newTodo","Math","max","Number","htmlFor","type","placeholder","value","onChange","target","replace","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1056677c.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import React from 'react';\nimport { User } from '../../types/User';\n\ninterface UserInfoProps {\n  user: User;\n}\n\nexport const UserInfo: React.FC<UserInfoProps> = ({ user }) => {\n  const { name, email } = user;\n\n  return (\n    <a className=\"UserInfo\" href={`mailto:${email}`}>\n      {name}\n    </a>\n  );\n};\n","import React from 'react';\nimport cn from 'classnames';\nimport { Todo } from '../../types/Todo';\nimport { UserInfo } from '../UserInfo';\n\ninterface TodoInfoProps {\n  todo: Todo;\n}\n\nexport const TodoInfo: React.FC<TodoInfoProps> = ({ todo }) => {\n  const {\n    title,\n    completed,\n    user,\n  } = todo;\n\n  return (\n    <article\n      className={cn('TodoInfo', { 'TodoInfo--completed': completed })}\n      data-id={todo.id}\n    >\n      <h2 className=\"TodoInfo__title\">{title}</h2>\n      {user && <UserInfo user={user} />}\n    </article>\n  );\n};\n","import React from 'react';\nimport { Todo } from '../../types/Todo';\nimport { TodoInfo } from '../TodoInfo/TodoInfo';\n\ninterface TodoListProps {\n  todos: Todo[];\n}\n\nexport const TodoList: React.FC<TodoListProps> = ({ todos }) => (\n  <section className=\"TodoList\">\n    {todos.map((todo => (\n      <TodoInfo\n        key={todo.id}\n        todo={todo}\n        data-id={todo.id}\n      />\n    )))}\n  </section>\n);\n","import React, { useState } from 'react';\nimport './App.scss';\n\nimport todosFromServer from './api/todos';\nimport usersFromServer from './api/users';\n\nimport { User } from './types/User';\nimport { Todo } from './types/Todo';\nimport { TodoList } from './components/TodoList';\n\nfunction getUserById(userId: number): User | null {\n  const foundUser = usersFromServer.find(user => user.id === userId);\n\n  return foundUser || null;\n}\n\nfunction getLargestTodoId(todos: Todo[]) {\n  return Math.max(...todos.map(todo => todo.id));\n}\n\nexport const todos: Todo[] = todosFromServer.map(todo => ({\n  ...todo,\n  user: getUserById(todo.userId),\n}));\n\nexport const App: React.FC = () => {\n  const [newTodoTitle, setNewTodoTitle] = useState('');\n  const [newTodoUserId, setNewTodoUserId] = useState('');\n  const [todosState, setTodos] = useState(todos);\n\n  const [isTitleError, setTitleError] = useState(false);\n  const [isUserError, setUserError] = useState(false);\n\n  const handleAddTodo = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    setTitleError(!newTodoTitle);\n    setUserError(!newTodoUserId);\n\n    if (newTodoTitle && newTodoUserId) {\n      setNewTodoTitle('');\n      setNewTodoUserId('');\n\n      const newTodo = {\n        id: getLargestTodoId(todos) + 1,\n        title: newTodoTitle,\n        userId: Number(newTodoUserId),\n        completed: false,\n        user: getUserById(Number(newTodoUserId)),\n      };\n\n      setTodos([...todosState, newTodo]);\n    }\n  };\n\n  const handleTitleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const title = event.target.value;\n\n    setNewTodoTitle(title.replace(/[^a-zA-Z0-9\\s]/g, ''));\n    setTitleError(false);\n  };\n\n  const handleUserChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setNewTodoUserId(event.target.value);\n    setUserError(false);\n  };\n\n  return (\n    <div className=\"App\">\n      <TodoList todos={todosState} />\n      <form data-testid=\"todo-form\" onSubmit={handleAddTodo}>\n        <label htmlFor=\"title\">\n          Title:\n          <input\n            className=\"input\"\n            data-cy=\"titleInput\"\n            type=\"text\"\n            id=\"title\"\n            placeholder=\"Enter the title\"\n            value={newTodoTitle}\n            onChange={handleTitleChange}\n          />\n\n          {isTitleError && (\n            <span className=\"error\">Please enter a title</span>\n          )}\n        </label>\n\n        <br />\n\n        <label htmlFor=\"user\">\n          User:\n          <select\n            className=\"input\"\n            data-cy=\"userSelect\"\n            id=\"user\"\n            value={newTodoUserId}\n            onChange={handleUserChange}\n          >\n            <option value=\"\">Choose a user</option>\n\n            {usersFromServer.map(user => (\n              <option key={user.id} value={user.id}>\n                {user.name}\n              </option>\n            ))}\n          </select>\n\n          {isUserError && (\n            <span className=\"error\">Please choose a user</span>\n          )}\n        </label>\n\n        <br />\n\n        <button\n          className=\"button\"\n          type=\"submit\"\n          data-cy=\"submitButton\"\n        >\n          Add\n        </button>\n      </form>\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}